/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Greeing OpenAPI3 UI
 * OpenAPI3 - Greeing Swagger UI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  AuthenticationResponse,
  CheckNicknameParams,
  EmailVerificationRequestDto,
  EmailVerificationResponse,
  EmailVerificationSendResponse,
  KakaoLoginRequest,
  LoginKakao200,
  LoginRequestDto,
  NicknameDuplicateResponse,
  SignupRequestDto,
  SignupResponse,
} from '../../model'
import { customAxiosInstanceForOrval } from '../../../shared/api/orvalAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ Î≥¥ÎÇ¥Í∏∞
 */
export const sendVerificationCode = (
  emailVerificationRequestDto: EmailVerificationRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<EmailVerificationSendResponse>(
    {
      url: `/v1/auth/verify-email/send`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailVerificationRequestDto,
    },
    options,
  )
}

export const getSendVerificationCodeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendVerificationCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    { data: EmailVerificationRequestDto }
  > = props => {
    const { data } = props ?? {}

    return sendVerificationCode(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SendVerificationCodeMutationResult = NonNullable<Awaited<ReturnType<typeof sendVerificationCode>>>
export type SendVerificationCodeMutationBody = EmailVerificationRequestDto
export type SendVerificationCodeMutationError = unknown

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ Î≥¥ÎÇ¥Í∏∞
 */
export const useSendVerificationCode = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof sendVerificationCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const mutationOptions = getSendVerificationCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ ÌôïÏù∏
 */
export const verifyEmailCode = (
  emailVerificationRequestDto: EmailVerificationRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<EmailVerificationResponse>(
    {
      url: `/v1/auth/verify-email/confirm`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailVerificationRequestDto,
    },
    options,
  )
}

export const getVerifyEmailCodeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: EmailVerificationRequestDto }
  > = props => {
    const { data } = props ?? {}

    return verifyEmailCode(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type VerifyEmailCodeMutationResult = NonNullable<Awaited<ReturnType<typeof verifyEmailCode>>>
export type VerifyEmailCodeMutationBody = EmailVerificationRequestDto
export type VerifyEmailCodeMutationError = unknown

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ ÌôïÏù∏
 */
export const useVerifyEmailCode = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Î¶¨ÌîÑÎ†àÏâ¨ ÌÜ†ÌÅ∞ Ïù¥Ïö©Ìï¥ÏÑú Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const refreshAccessToken = (options?: SecondParameter<typeof customAxiosInstanceForOrval>) => {
  return customAxiosInstanceForOrval<AuthenticationResponse>({ url: `/v1/auth/token/refresh`, method: 'POST' }, options)
}

export const getRefreshAccessTokenMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof refreshAccessToken>>, TError, void, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof refreshAccessToken>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshAccessToken>>, void> = () => {
    return refreshAccessToken(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RefreshAccessTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshAccessToken>>>

export type RefreshAccessTokenMutationError = unknown

/**
 * @summary Î¶¨ÌîÑÎ†àÏâ¨ ÌÜ†ÌÅ∞ Ïù¥Ïö©Ìï¥ÏÑú Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const useRefreshAccessToken = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof refreshAccessToken>>, TError, void, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof refreshAccessToken>>, TError, void, TContext> => {
  const mutationOptions = getRefreshAccessTokenMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const createUser = (
  signupRequestDto: SignupRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<SignupResponse>(
    { url: `/v1/auth/signup`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: signupRequestDto },
    options,
  )
}

export const getCreateUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: SignupRequestDto }> = props => {
    const { data } = props ?? {}

    return createUser(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type CreateUserMutationBody = SignupRequestDto
export type CreateUserMutationError = unknown

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useCreateUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const loginUser = (
  loginRequestDto: LoginRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<AuthenticationResponse>(
    { url: `/v1/auth/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: loginRequestDto },
    options,
  )
}

export const getLoginUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUser>>, { data: LoginRequestDto }> = props => {
    const { data } = props ?? {}

    return loginUser(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginUserMutationResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserMutationBody = LoginRequestDto
export type LoginUserMutationError = unknown

/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const useLoginUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext> => {
  const mutationOptions = getLoginUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏
 */
export const loginKakao = (
  kakaoLoginRequest: KakaoLoginRequest,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<LoginKakao200>(
    { url: `/v1/auth/kakao`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: kakaoLoginRequest },
    options,
  )
}

export const getLoginKakaoMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginKakao>>, TError, { data: KakaoLoginRequest }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof loginKakao>>, TError, { data: KakaoLoginRequest }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginKakao>>, { data: KakaoLoginRequest }> = props => {
    const { data } = props ?? {}

    return loginKakao(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginKakaoMutationResult = NonNullable<Awaited<ReturnType<typeof loginKakao>>>
export type LoginKakaoMutationBody = KakaoLoginRequest
export type LoginKakaoMutationError = unknown

/**
 * @summary Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏
 */
export const useLoginKakao = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginKakao>>, TError, { data: KakaoLoginRequest }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof loginKakao>>, TError, { data: KakaoLoginRequest }, TContext> => {
  const mutationOptions = getLoginKakaoMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µÌôïÏù∏
 */
export const checkNickname = (
  params: CheckNicknameParams,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
  signal?: AbortSignal,
) => {
  return customAxiosInstanceForOrval<NicknameDuplicateResponse>(
    { url: `/v1/auth/check-nickname`, method: 'GET', params, signal },
    options,
  )
}

export const getCheckNicknameQueryKey = (params: CheckNicknameParams) => {
  return [`/v1/auth/check-nickname`, ...(params ? [params] : [])] as const
}

export const getCheckNicknameQueryOptions = <TData = Awaited<ReturnType<typeof checkNickname>>, TError = unknown>(
  params: CheckNicknameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof checkNickname>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCheckNicknameQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof checkNickname>>> = ({ signal }) =>
    checkNickname(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof checkNickname>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CheckNicknameQueryResult = NonNullable<Awaited<ReturnType<typeof checkNickname>>>
export type CheckNicknameQueryError = unknown

/**
 * @summary ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µÌôïÏù∏
 */
export const useCheckNickname = <TData = Awaited<ReturnType<typeof checkNickname>>, TError = unknown>(
  params: CheckNicknameParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof checkNickname>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCheckNicknameQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
