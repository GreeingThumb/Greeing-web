/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Greeing OpenAPI3 UI
 * OpenAPI3 - Greeing Swagger UI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { CategoryRequestDto, CategoryResponse } from '../../model'
import { customAxiosInstanceForOrval } from '../../../shared/api/orvalAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
 */
export const updateCategory = (
  id: number,
  categoryRequestDto: CategoryRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<CategoryResponse>(
    {
      url: `/v1/category/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: categoryRequestDto,
    },
    options,
  )
}

export const getUpdateCategoryMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCategory>>,
    TError,
    { id: number; data: CategoryRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCategory>>,
  TError,
  { id: number; data: CategoryRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCategory>>,
    { id: number; data: CategoryRequestDto }
  > = props => {
    const { id, data } = props ?? {}

    return updateCategory(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateCategory>>>
export type UpdateCategoryMutationBody = CategoryRequestDto
export type UpdateCategoryMutationError = unknown

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
 */
export const useUpdateCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCategory>>,
    TError,
    { id: number; data: CategoryRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCategory>>,
  TError,
  { id: number; data: CategoryRequestDto },
  TContext
> => {
  const mutationOptions = getUpdateCategoryMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú
 */
export const deleteCategory = (id: number, options?: SecondParameter<typeof customAxiosInstanceForOrval>) => {
  return customAxiosInstanceForOrval<void>({ url: `/v1/category/${id}`, method: 'DELETE' }, options)
}

export const getDeleteCategoryMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCategory>>, { id: number }> = props => {
    const { id } = props ?? {}

    return deleteCategory(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCategory>>>

export type DeleteCategoryMutationError = unknown

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú
 */
export const useDeleteCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCategory>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof deleteCategory>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteCategoryMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ±
 */
export const createCategory = (
  categoryRequestDto: CategoryRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<CategoryResponse>(
    { url: `/v1/category`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: categoryRequestDto },
    options,
  )
}

export const getCreateCategoryMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCategory>>,
    TError,
    { data: CategoryRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof createCategory>>, TError, { data: CategoryRequestDto }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCategory>>,
    { data: CategoryRequestDto }
  > = props => {
    const { data } = props ?? {}

    return createCategory(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createCategory>>>
export type CreateCategoryMutationBody = CategoryRequestDto
export type CreateCategoryMutationError = unknown

/**
 * @summary [Ïñ¥ÎìúÎØº] Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ±
 */
export const useCreateCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCategory>>,
    TError,
    { data: CategoryRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof createCategory>>, TError, { data: CategoryRequestDto }, TContext> => {
  const mutationOptions = getCreateCategoryMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary ÌôúÏÑ±Îêú Ïπ¥ÌÖåÍ≥†Î¶¨ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const getActiveCategories = (
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
  signal?: AbortSignal,
) => {
  return customAxiosInstanceForOrval<CategoryResponse[]>({ url: `/v1/categories`, method: 'GET', signal }, options)
}

export const getGetActiveCategoriesQueryKey = () => {
  return [`/v1/categories`] as const
}

export const getGetActiveCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getActiveCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveCategories>>, TError, TData>>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetActiveCategoriesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveCategories>>> = ({ signal }) =>
    getActiveCategories(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActiveCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetActiveCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveCategories>>>
export type GetActiveCategoriesQueryError = unknown

/**
 * @summary ÌôúÏÑ±Îêú Ïπ¥ÌÖåÍ≥†Î¶¨ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const useGetActiveCategories = <
  TData = Awaited<ReturnType<typeof getActiveCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getActiveCategories>>, TError, TData>>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetActiveCategoriesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
