/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Greeing OpenAPI3 UI
 * OpenAPI3 - Greeing Swagger UI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  BasePageResponsePlantSaveResponse,
  CreatePlantBody,
  GetPlantsParams,
  PlantSaveResponse,
  UpdatePlantBody,
} from '../../model'
import { customAxiosInstanceForOrval } from '../../../shared/api/orvalAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Îã®Ïùº Ï°∞Ìöå
 */
export const getPlant = (
  plantId: number,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
  signal?: AbortSignal,
) => {
  return customAxiosInstanceForOrval<PlantSaveResponse>({ url: `/v1/plant/${plantId}`, method: 'GET', signal }, options)
}

export const getGetPlantQueryKey = (plantId: number) => {
  return [`/v1/plant/${plantId}`] as const
}

export const getGetPlantQueryOptions = <TData = Awaited<ReturnType<typeof getPlant>>, TError = unknown>(
  plantId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlant>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPlantQueryKey(plantId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlant>>> = ({ signal }) =>
    getPlant(plantId, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!plantId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlant>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPlantQueryResult = NonNullable<Awaited<ReturnType<typeof getPlant>>>
export type GetPlantQueryError = unknown

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Îã®Ïùº Ï°∞Ìöå
 */
export const useGetPlant = <TData = Awaited<ReturnType<typeof getPlant>>, TError = unknown>(
  plantId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlant>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPlantQueryOptions(plantId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
 */
export const updatePlant = (
  plantId: number,
  updatePlantBody: UpdatePlantBody,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  const formData = new FormData()
  formData.append('plantCreateRequestDto', JSON.stringify(updatePlantBody.plantCreateRequestDto))
  if (updatePlantBody.plantImage !== undefined) {
    formData.append('plantImage', updatePlantBody.plantImage)
  }

  return customAxiosInstanceForOrval<PlantSaveResponse>(
    { url: `/v1/plant/${plantId}`, method: 'PUT', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
    options,
  )
}

export const getUpdatePlantMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePlant>>,
    TError,
    { plantId: number; data: UpdatePlantBody },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePlant>>,
  TError,
  { plantId: number; data: UpdatePlantBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePlant>>,
    { plantId: number; data: UpdatePlantBody }
  > = props => {
    const { plantId, data } = props ?? {}

    return updatePlant(plantId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePlantMutationResult = NonNullable<Awaited<ReturnType<typeof updatePlant>>>
export type UpdatePlantMutationBody = UpdatePlantBody
export type UpdatePlantMutationError = unknown

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
 */
export const useUpdatePlant = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePlant>>,
    TError,
    { plantId: number; data: UpdatePlantBody },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof updatePlant>>,
  TError,
  { plantId: number; data: UpdatePlantBody },
  TContext
> => {
  const mutationOptions = getUpdatePlantMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú ÏÇ≠Ï†ú
 */
export const deletePlant = (plantId: number, options?: SecondParameter<typeof customAxiosInstanceForOrval>) => {
  return customAxiosInstanceForOrval<void>({ url: `/v1/plant/${plantId}`, method: 'DELETE' }, options)
}

export const getDeletePlantMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError, { plantId: number }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError, { plantId: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePlant>>, { plantId: number }> = props => {
    const { plantId } = props ?? {}

    return deletePlant(plantId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePlantMutationResult = NonNullable<Awaited<ReturnType<typeof deletePlant>>>

export type DeletePlantMutationError = unknown

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú ÏÇ≠Ï†ú
 */
export const useDeletePlant = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deletePlant>>, TError, { plantId: number }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof deletePlant>>, TError, { plantId: number }, TContext> => {
  const mutationOptions = getDeletePlantMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Îì±Î°ù
 */
export const createPlant = (
  createPlantBody: CreatePlantBody,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  const formData = new FormData()
  formData.append('plantCreateRequestDto', JSON.stringify(createPlantBody.plantCreateRequestDto))
  if (createPlantBody.plantImage !== undefined) {
    formData.append('plantImage', createPlantBody.plantImage)
  }

  return customAxiosInstanceForOrval<PlantSaveResponse>(
    { url: `/v1/plant`, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData },
    options,
  )
}

export const getCreatePlantMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError, { data: CreatePlantBody }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError, { data: CreatePlantBody }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPlant>>, { data: CreatePlantBody }> = props => {
    const { data } = props ?? {}

    return createPlant(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePlantMutationResult = NonNullable<Awaited<ReturnType<typeof createPlant>>>
export type CreatePlantMutationBody = CreatePlantBody
export type CreatePlantMutationError = unknown

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Îì±Î°ù
 */
export const useCreatePlant = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createPlant>>, TError, { data: CreatePlantBody }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof createPlant>>, TError, { data: CreatePlantBody }, TContext> => {
  const mutationOptions = getCreatePlantMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const getPlants = (
  params: GetPlantsParams,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
  signal?: AbortSignal,
) => {
  return customAxiosInstanceForOrval<BasePageResponsePlantSaveResponse>(
    { url: `/v1/plants`, method: 'GET', params, signal },
    options,
  )
}

export const getGetPlantsQueryKey = (params: GetPlantsParams) => {
  return [`/v1/plants`, ...(params ? [params] : [])] as const
}

export const getGetPlantsQueryOptions = <TData = Awaited<ReturnType<typeof getPlants>>, TError = unknown>(
  params: GetPlantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlants>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPlantsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlants>>> = ({ signal }) =>
    getPlants(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPlants>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPlantsQueryResult = NonNullable<Awaited<ReturnType<typeof getPlants>>>
export type GetPlantsQueryError = unknown

/**
 * @summary ÏãùÎ¨º Ïπ¥Îìú Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const useGetPlants = <TData = Awaited<ReturnType<typeof getPlants>>, TError = unknown>(
  params: GetPlantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPlants>>, TError, TData>>
    request?: SecondParameter<typeof customAxiosInstanceForOrval>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPlantsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
