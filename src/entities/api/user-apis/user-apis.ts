/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Greeing OpenAPI3 UI
 * OpenAPI3 - Greeing Swagger UI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'
import type { UpdateUserRequestDto, UpdateUserResponse } from '../../model'
import { customAxiosInstanceForOrval } from '../../../shared/api/orvalAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï
 */
export const updateUserInfo = (
  updateUserRequestDto: UpdateUserRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<UpdateUserResponse>(
    { url: `/v1/user`, method: 'PUT', headers: { 'Content-Type': 'application/json' }, data: updateUserRequestDto },
    options,
  )
}

export const getUpdateUserInfoMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserInfo>>,
    TError,
    { data: UpdateUserRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserInfo>>,
  TError,
  { data: UpdateUserRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserInfo>>,
    { data: UpdateUserRequestDto }
  > = props => {
    const { data } = props ?? {}

    return updateUserInfo(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateUserInfoMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserInfo>>>
export type UpdateUserInfoMutationBody = UpdateUserRequestDto
export type UpdateUserInfoMutationError = unknown

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateUserInfo = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserInfo>>,
    TError,
    { data: UpdateUserRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof updateUserInfo>>, TError, { data: UpdateUserRequestDto }, TContext> => {
  const mutationOptions = getUpdateUserInfoMutationOptions(options)

  return useMutation(mutationOptions)
}
