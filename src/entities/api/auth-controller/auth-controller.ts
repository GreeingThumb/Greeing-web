/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Greeing OpenAPI3 UI
 * OpenAPI3 - Greeing Swagger UI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'
import type {
  EmailVerificationRequestDto,
  EmailVerificationResponse,
  EmailVerificationSendResponse,
  LoginRequestDto,
  LoginResponse,
  SignupRequestDto,
  SignupResponse,
} from '../../model'
import { customAxiosInstanceForOrval } from '../../../shared/api/orvalAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ Î≥¥ÎÇ¥Í∏∞
 */
export const sendVerificationCode = (
  emailVerificationRequestDto: EmailVerificationRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<EmailVerificationSendResponse>(
    {
      url: `/api/v1/auth/verify-email/send`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailVerificationRequestDto,
    },
    options,
  )
}

export const getSendVerificationCodeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendVerificationCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    { data: EmailVerificationRequestDto }
  > = props => {
    const { data } = props ?? {}

    return sendVerificationCode(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SendVerificationCodeMutationResult = NonNullable<Awaited<ReturnType<typeof sendVerificationCode>>>
export type SendVerificationCodeMutationBody = EmailVerificationRequestDto
export type SendVerificationCodeMutationError = unknown

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ Î≥¥ÎÇ¥Í∏∞
 */
export const useSendVerificationCode = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendVerificationCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof sendVerificationCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const mutationOptions = getSendVerificationCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ ÌôïÏù∏
 */
export const verifyEmailCode = (
  emailVerificationRequestDto: EmailVerificationRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<EmailVerificationResponse>(
    {
      url: `/api/v1/auth/verify-email/confirm`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailVerificationRequestDto,
    },
    options,
  )
}

export const getVerifyEmailCodeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: EmailVerificationRequestDto }
  > = props => {
    const { data } = props ?? {}

    return verifyEmailCode(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type VerifyEmailCodeMutationResult = NonNullable<Awaited<ReturnType<typeof verifyEmailCode>>>
export type VerifyEmailCodeMutationBody = EmailVerificationRequestDto
export type VerifyEmailCodeMutationError = unknown

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ùÎ≤àÌò∏ ÌôïÏù∏
 */
export const useVerifyEmailCode = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerificationRequestDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerificationRequestDto },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const createUser = (
  signupRequestDto: SignupRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<SignupResponse>(
    {
      url: `/api/v1/auth/signup`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signupRequestDto,
    },
    options,
  )
}

export const getCreateUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: SignupRequestDto }> = props => {
    const { data } = props ?? {}

    return createUser(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type CreateUserMutationBody = SignupRequestDto
export type CreateUserMutationError = unknown

/**
 * @summary Ïú†Ï†Ä ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useCreateUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof createUser>>, TError, { data: SignupRequestDto }, TContext> => {
  const mutationOptions = getCreateUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const loginUser = (
  loginRequestDto: LoginRequestDto,
  options?: SecondParameter<typeof customAxiosInstanceForOrval>,
) => {
  return customAxiosInstanceForOrval<LoginResponse>(
    {
      url: `/api/v1/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequestDto,
    },
    options,
  )
}

export const getLoginUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUser>>, { data: LoginRequestDto }> = props => {
    const { data } = props ?? {}

    return loginUser(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginUserMutationResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserMutationBody = LoginRequestDto
export type LoginUserMutationError = unknown

/**
 * @summary Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
 */
export const useLoginUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext>
  request?: SecondParameter<typeof customAxiosInstanceForOrval>
}): UseMutationResult<Awaited<ReturnType<typeof loginUser>>, TError, { data: LoginRequestDto }, TContext> => {
  const mutationOptions = getLoginUserMutationOptions(options)

  return useMutation(mutationOptions)
}
